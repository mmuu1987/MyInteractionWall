#pragma kernel CSPositionKernel
#pragma kernel InitLerp
 


 #define thread_group_size_x 64
 #define thread_group_size_y 1
 #define P 3.141592653




  struct PosAndDir
{
        float4 position;
        float4 velocity;
		float3 initialVelocity;
        float4 originalPos;
		float3 moveTarget;
		float3 moveDir;
		float2 indexRC;
		int picIndex;
        int bigIndex;
        float4 uvOffset; 
	    float4 uv2Offset; 
};


#include "../GPUParticleComputeCommon.cginc"

  struct DepthInfo
{
     int originalDepth;
	 float toDepth;
	 float originalScal;
	 float handleDepth;
	 float scale;
     float alpha;
};


#include "Assets/Common/Shaders/Math.cginc"
#include "Assets/Common/Shaders/Random.cginc"




RWStructuredBuffer<PosAndDir> clickPointsBuff;
RWStructuredBuffer<DepthInfo> depthBuffer;


float deltaTime;





float4 clickPoint;

//插值速度  
float MoveSpeed;





[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CSPositionKernel (uint3 id : SV_DispatchThreadID)
{

  
   float4 pos = positionBuffer[id.x].position;

   if(pos.w==0)return;//初始数据w为0的不搞事情  

   float4 velocity = positionBuffer[id.x].velocity;

   float3 moveTarget = positionBuffer[id.x].moveTarget;

   float z = depthBuffer[velocity.x].handleDepth;

   float alpha = depthBuffer[velocity.x].alpha;

   float scale = depthBuffer[velocity.x].scale;
   
   float3 depthDir = float3(0,0,z);

   float3 moveDir = float3(0.0075,0,0);

   moveTarget +=  moveDir;

   float3 allDir = moveTarget +depthDir;
  

   pos.xyz= lerp(pos.xyz,allDir,deltaTime);
   pos.w = lerp(pos.w,scale,deltaTime);
   velocity.y = lerp(velocity.y,alpha,deltaTime);

   positionBuffer[id.x].position = pos;

   positionBuffer[id.x].moveTarget = moveTarget;

   positionBuffer[id.x].velocity= float4(velocity.x,velocity.y,0,0);//保存新的透明值

}

//位置变换  
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void InitLerp (uint3 id : SV_DispatchThreadID)
{

   //positionBuffer[id.x].moveDir= float3(0,0,0);
  float v = deltaTime;

  if(v>=1)v=1;
  positionBuffer[id.x].position.xyz =lerp(positionBuffer[id.x].position.xyz,positionBuffer[id.x].moveTarget,1);//
 
}