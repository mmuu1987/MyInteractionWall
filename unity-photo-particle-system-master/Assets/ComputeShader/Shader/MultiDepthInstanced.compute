#pragma kernel CSPositionKernel
#pragma kernel InitLerp
 


 #define thread_group_size_x 64
 #define thread_group_size_y 1
 #define P 3.141592653




  struct PosAndDir
{
        float4 position;
        float4 velocity;
		float3 initialVelocity;
        float4 originalPos;
		float3 moveTarget;
		float3 moveDir;
		float2 indexRC;
		int picIndex;
        int bigIndex;
        float4 uvOffset; 
	    float4 uv2Offset; 
};


#include "../GPUParticleComputeCommon.cginc"



#include "Assets/Common/Shaders/Math.cginc"
#include "Assets/Common/Shaders/Random.cginc"




RWStructuredBuffer<PosAndDir> clickPointsBuff;
float Z;
//拖拽的时候的输入量
float4 movePos;
int actionState;
float deltaTime;
//归位的量
float3 moveDir;
//0索引图片的点,不受图片运动的影响
float3 originPos;

//面片组成的矩形的宽
float rectangleWidth;
//面片组成矩形的高
float rectangleHeight;

float4 clickPoint;

//插值速度
float MoveSpeed;

float4 drag;

int rot;
//点的移动
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CSPositionKernel (uint3 id : SV_DispatchThreadID)
{
   positionBuffer[id.x].position.x+=0.0065f;
}

//位置变换
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void InitLerp (uint3 id : SV_DispatchThreadID)
{

   //positionBuffer[id.x].moveDir= float3(0,0,0);
  float v = deltaTime;

  if(v>=1)v=1;
  positionBuffer[id.x].position.xyz =lerp(positionBuffer[id.x].position.xyz,positionBuffer[id.x].moveTarget,1);//
 
}