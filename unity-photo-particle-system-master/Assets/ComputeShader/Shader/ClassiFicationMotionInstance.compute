#pragma kernel CSPositionKernel
#pragma kernel InitLerp
 


 #define thread_group_size_x 64
 #define thread_group_size_y 1
 #define P 3.141592653




//#include "../GPUParticle.cginc"
  struct PosAndDir
{
        float4 position;
        float4 velocity;
		float3 initialVelocity;
        float4 originalPos;
		float3 moveTarget;
		float3 moveDir;
		float2 indexRC;
		int picIndex;
        int bigIndex;
        float4 uvOffset; 
	    float4 uv2Offset; 

};
#include "../GPUParticleComputeCommon.cginc"



#include "Assets/Common/Shaders/Math.cginc"
#include "Assets/Common/Shaders/Random.cginc"




RWStructuredBuffer<PosAndDir> clickPointsBuff;
float Z;
//拖拽的时候的输入量
float4 movePos;
int actionState;
float deltaTime;
//归位的量
float3 moveDir;
//0索引图片的点,不受图片运动的影响
float3 originPos;

//面片组成的矩形的宽
float rectangleWidth;
//面片组成矩形的高
float rectangleHeight;

float4 clickPoint;

//插值速度
float MoveSpeed;

float4 drag;

int rot;

//检测点击点在哪个面片里面
void CheckClickPoint(uint3 id)
{
   
   if(clickPoint.z>=100000)return;

   float4 pos = positionBuffer[id.x].position;
   //float2 leftDownP2, float2 leftUpP1, float2 rightDownP3, float2 rightUpP4, float2 p
   //默认图片大小为长宽为1，一半就是0.5
   float2 leftDown = pos.xy + float2(-0.5,-0.5);

   float2 leftUp = pos.xy + float2(-0.5,0.5);

   float2 rightDown = pos.xy + float2(0.5,-0.5);

   float2 rightUp = pos.xy + float2(0.5,0.5);

   bool   isContains = ContainsQuadrangle(leftDown,leftUp,rightDown,rightUp,clickPoint);

   if(isContains)
   {
    positionBuffer[id.x].position.w=2;
	clickPointsBuff[0] = positionBuffer[id.x];
   }
}

void LerpTex(uint3 id )
{
   //这里用velocity存储插值信息
   float4 v = positionBuffer[id.x].velocity;
   float3 cache =  positionBuffer[id.x].initialVelocity;

   v.z+=deltaTime;
   if(v.z>=v.x)//延长时间结束
   {
     //开始插值事务
     float t = v.z -v.x ;//得到插值时间

	 if(v.y>=0)//正向插值
	 {
	   v.w = t/v.y;
	  
	   if(v.w>1)//重置插值数据
	   {
	    v = float4(v.x,-v.y,0,1);//-v.y 反向插值的证据
		cache.x++;//记录改变次数
	   }
	 }
	 else //反向插值
	 {
	   v.w = (-v.y-t)/-v.y;
	   if(v.w<=0)
	   {
	     v = float4(v.x,-v.y,0,0);
		// cache.x++;//记录改变次数
	   }
	 }
   }

	 positionBuffer[id.x].velocity = v;
	 positionBuffer[id.x].initialVelocity=cache ;
}
//点的移动
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CSPositionKernel (uint3 id : SV_DispatchThreadID)
{
    LerpTex(id);

	positionBuffer[id.x].position.xyz =lerp(positionBuffer[id.x].position.xyz,positionBuffer[id.x].moveTarget,deltaTime*2.0f);

	//CheckClickPoint(id);
}

//位置变换
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void InitLerp (uint3 id : SV_DispatchThreadID)
{

  //positionBuffer[id.x].moveDir= float3(0,0,0);
  float v = deltaTime;

  if(v>=1)v=1;
 
}