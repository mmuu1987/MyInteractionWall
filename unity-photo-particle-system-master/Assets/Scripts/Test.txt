using System.Collections;
using System.Collections.Generic;
using System.Security.AccessControl;
using UnityEngine;
using mattatz;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using UnityEngine.Rendering;

public class Test : MonoBehaviour
{


 

    public Transform Head;

    /// <summary>
    /// 需要旋转的角度
    /// </summary>
    private float _angle;

    /// <summary>
    /// 插值系数
    /// </summary>
    private float _timeTemp = 2f;
    /// <summary>
    /// 插值速度
    /// </summary>
    public float speed = 0.01f;

    public float Distance = 2f;

    /// <summary>
    /// 相机到头部的向量
    /// </summary>
    private Vector3 _camToheadDir;
    /// <summary>
    /// 相机到头部的相对高度
    /// </summary>
    private float _height;


    private void MoveToHead()
    {
        Transform cam = Camera.main.transform;



        _camToheadDir = Head.position - cam.position;

        _camToheadDir = new Vector3(_camToheadDir.x, 0f, _camToheadDir.z);

        Vector3 headDir = -new Vector3(Head.forward.x, 0f, Head.forward.z);

        _angle = Vector3.Angle(_camToheadDir, headDir);

        Vector3 dir = Vector3.Cross(_camToheadDir, headDir);

        if (dir.y > 0)
        {
            _angle *= -1;
        }
        Debug.Log(_angle);

        _timeTemp = 0f;

        Distance = _camToheadDir.magnitude;
        //算出角度后，再重新获取完整的向量
        _camToheadDir = Head.position - cam.position;

        _height = cam.position.y- Head.position.y  ;
    }

   
	// Update is called once per frame
	void Update () {



        if (_timeTemp<=1)
	    {
            _timeTemp += Time.deltaTime * speed;

            Transform cam = Camera.main.transform;
            //角度插值系数
            float lerpValue = Mathf.Lerp(0f, _angle, _timeTemp);
            //高度插值系数
	        float tempHeight = Mathf.Lerp(0f, _height, _timeTemp);
            //距离插值系数
	        float dis = Mathf.Lerp(Distance, 3, _timeTemp);

            
            Vector3 dir =  _camToheadDir+new Vector3(0f,tempHeight,0f);

	        dir = dir.normalized;

            Quaternion r = Quaternion.Euler(new Vector3(0f, -lerpValue, 0f));//正数顺时针，负数逆时针

            Vector3 newDir = r * -dir;

            cam.position = Head.position + newDir * dis;


            //旋转相对容易，难得是位置
            cam.transform.forward = Vector3.Lerp(cam.transform.forward, (-newDir).normalized,_timeTemp);//使相机慢慢朝向脸 timeTemp可另外使用一个变量参数

	    }
	}

  
}
