#pragma kernel CSPositionKernel
#pragma kernel InitLerp
 


 #define thread_group_size_x 64
 #define thread_group_size_y 1
 #define P 3.141592653





#include "../GPUParticle.cginc"
#include "../GPUParticleComputeCommon.cginc"


#include "Assets/Common/Shaders/Math.cginc"
#include "Assets/Common/Shaders/Random.cginc"


RWStructuredBuffer<PosAndDir> clickPointsBuff;
float Z;
//拖拽的时候的输入量
float4 movePos;
int actionState;
float deltaTime;
//归位的量
float2 moveDir;
//0索引图片的点,不受图片运动的影响
float3 originPos;

//面片组成的矩形的宽
float rectangleWidth;
//面片组成矩形的高
float rectangleHeight;

float4 clickPoint;
//插值速度
float MoveSpeed;

//检测点击点在哪个面片里面
void CheckClickPoint(uint3 id)
{
   
   if(clickPoint.z>=100000)return;

   float4 pos = positionBuffer[id.x].position;
   //float2 leftDownP2, float2 leftUpP1, float2 rightDownP3, float2 rightUpP4, float2 p
   //默认图片大小为长宽为1，一半就是0.5
   float2 leftDown = pos.xy + float2(-0.5,-0.5);

   float2 leftUp = pos.xy + float2(-0.5,0.5);

   float2 rightDown = pos.xy + float2(0.5,-0.5);

   float2 rightUp = pos.xy + float2(0.5,0.5);

   bool   isContains = ContainsQuadrangle(leftDown,leftUp,rightDown,rightUp,clickPoint);

   if(isContains)
   {
    positionBuffer[id.x].position.w=2;
	clickPointsBuff[0] = positionBuffer[id.x];
   }
}
//点的移动
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CSPositionKernel (uint3 id : SV_DispatchThreadID)
{
		positionBuffer[id.x].position.z = Z;//z深度影响
		////originPos.z = Z;
		////0为弹起后的误操作状态，1为按下，2为按下中
		if(actionState==2)
		{
		  positionBuffer[id.x].position.xy += movePos;//移动加成后的位置
		  positionBuffer[id.x].moveDir= float3(0,0,0);
		  
		}
		else if(actionState==3 ||actionState==4)//滚轮状态
		{
	    	positionBuffer[id.x].moveDir= float3(0,0,0);
		}
		else if(actionState==0)
		{
		 if(length(positionBuffer[id.x].moveDir)>0)
		 {
		   
		   if(distance(positionBuffer[id.x].position,positionBuffer[id.x].moveTarget)>=0.001f)
		   {
		    positionBuffer[id.x].position.xyz = lerp(positionBuffer[id.x].position,positionBuffer[id.x].moveTarget,deltaTime*MoveSpeed);
		   }
		   else
		   {
		   //自动位移过程
		    positionBuffer[id.x].position.xy += positionBuffer[id.x].moveDir;
			positionBuffer[id.x].moveTarget =positionBuffer[id.x].position.xyz;
		   }

		   float dir =  (positionBuffer[id.x].moveDir.x>0)?1:-1;

		   if(positionBuffer[id.x].moveDir.x<0)
		   {
		    
			if(positionBuffer[id.x].position.x <=originPos.x)
		    {
		     positionBuffer[id.x].position.x = originPos.x +rectangleWidth;
		     positionBuffer[id.x].moveTarget.x = originPos.x +rectangleWidth; 
		    }

		   }else
		   {
		    if(positionBuffer[id.x].position.x >=originPos.x+rectangleWidth)
		    {
		    positionBuffer[id.x].position.x = originPos.x;
		    positionBuffer[id.x].moveTarget.x = originPos.x; 
		    }
		   }

		  
		 }
		 else//moveDir要第二次运行到该步骤的时候才能够取得值
		 {
		    float r = positionBuffer[id.x].indexRC.x;

		    float v =  r % 3;//隔两行动
			

		    positionBuffer[id.x].moveDir= float3( v*0.01*sin(r),0,1);//z用来做if判断

		    positionBuffer[id.x].moveTarget = positionBuffer[id.x].position.xyz + float3(moveDir.x,moveDir.y,0);
		  }
		}

		CheckClickPoint(id);
}

//位置变换
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void InitLerp (uint3 id : SV_DispatchThreadID)
{

  //positionBuffer[id.x].moveDir= float3(0,0,0);
  float v = deltaTime;

  if(v>=1)v=1;
  positionBuffer[id.x].position.xyz =lerp(positionBuffer[id.x].originalPos,positionBuffer[id.x].moveTarget,v);//
}